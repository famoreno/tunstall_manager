
########################################################################
# Common parameters for the MOVE_BASE pkg (navigation stack)
########################################################################

controller_frequency: 10.0      # Hz at which to run the control loop and send velocity commands to the base. IMPORTANT -> Update the accelerations of the local planner according to this value
planner_patience: 5.0           # How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.
controller_patience: 7.0        # How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.
planner_frequency: 0.2          # The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked.

# Set Recovery behaviours
# These behaviors will be run when move_base fails to find a valid plan in the order that they are specified.
recovery_behaviors: [
  {name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery},
  {name: rotate_recovery, type: rotate_recovery/RotateRecovery},
  #{name: stepback_recovery, type: stepback_recovery/StepBackRecovery},
  {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
]

stepback_recovery:
    setpback_speed: -0.1    # m/s (shuld be negative)
    stepback_time: 2.0      # seconds

conservative_reset:
  reset_distance: 3.0     #Reset costmaps from obstacles at a distance > "reset_distance"
  layer_names: ["obstacle_layer"]     # Layers to reset from the costmap

aggressive_reset:
  reset_distance: 0.0     #Reset costmaps from obstacles at a distance > "reset_distance" (0.0 means all obstacles)
  layer_names: ["obstacle_layer"]     # Layers to reset from the costmap
